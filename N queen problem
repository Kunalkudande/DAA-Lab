#include <iostream>
using namespace std;

bool isSafe(int **arr, int row, int col, int size)
{

    // checking in column
    for (int i = 0; i < size; i++)
    {
        if (arr[i][col] == 1)
        {
            return false;
        }
    }
    // checking in diagonal left side
    int r = row;
    int c = col;
    while (r >= 0 && c >= 0)
    {
        if (arr[r][c] == 1)
        {
            return false;
        }
        r--;
        c--;
    }
    //  checking in diagonal right side
    r = row;
    c = col;
    while (r >= 0 && c < size)
    {
        if (arr[r][c] == 1)
        {
            return false;
        }
        r--;
        c++;
    }
    return true;
}

bool nQueen(int **arr, int row, int size)
{

    // base Case
    if (row >= size)
    {
        return true;
    }
    for (int col = 0; col < size; col++)
    {
        if (isSafe(arr, row, col, size))
        {
            arr[row][col] = 1;

            if (nQueen(arr, row + 1, size))
            {
                return true;
            }

            arr[row][col] = 0; // backtracking
        }
    }
    return false;
}

int main()
{

    int size;
    cout << "Enter the number of queens: ";
    cin >> size;

    int **arr = new int *[size];

    for (int i = 0; i < size; i++)
    {
        arr[i] = new int[size];
        for (int j = 0; j < size; j++)
        {
            arr[i][j] = 0;
        }
    }

    if (nQueen(arr, 0, size))
    {
        for (int i = 0; i < size; i++)
        {
            for (int j = 0; j < size; j++)
            {
                cout << arr[i][j] << "  ";
            }
            cout << "\n";
        }
    }

cout<<"\nPotions of queens :- \n";
    for (int i = 0; i < size; i++)
    {
        for (int j = 0; j < size; j++)
        {
            if (arr[i][j])
            {
                cout << i << "  " << j;
            }
        }
        cout << "\n";
    }

    return 0;
}

/* 
OutPut

Enter the number of queens: 4
0  1  0  0  
0  0  0  1  
1  0  0  0  
0  0  1  0  

Potions of queens :- 
0  1
1  3
2  0
3  2
 */
